#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v3.4.0 Alpha"
    metersPerUnit = 0.01
    upAxis = "Z"
)

def Xform "root"
{
    float3 xformOp:scale = (100, 100, 100)
    uniform token[] xformOpOrder = ["xformOp:scale"]

    def Scope "lights"
    {
        def DomeLight "environment"
        {
            custom color3f color = (0.05087609, 0.05087609, 0.05087609)
            color3f inputs:color = (0.05087609, 0.05087609, 0.05087609)
            float inputs:intensity = 683.0135
            custom float intensity = 683.0135
        }
    }

    def Scope "materials"
    {
        def Material "Material"
        {
            token outputs:surface.connect = </root/materials/Material/preview/Principled_BSDF.outputs:surface>
            custom string userProperties:blenderName:data = "Material"

            def Scope "preview"
            {
                def Shader "Principled_BSDF"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 0
                    float inputs:clearcoatRoughness = 0.03
                    color3f inputs:diffuseColor = (0.8, 0.8, 0.8)
                    color3f inputs:emissiveColor = (0, 0, 0)
                    float inputs:ior = 1.45
                    float inputs:metallic = 0
                    float inputs:opacity = 1
                    float inputs:roughness = 0.5
                    float inputs:specular = 0.5
                    token outputs:surface
                }
            }
        }
    }

    def SkelRoot "Cube"
    {
        custom string userProperties:blenderName:object = "Cube"

        def Mesh "Cube" (
            active = true
            prepend apiSchemas = ["SkelBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 4, 6, 2, 3, 2, 6, 7, 7, 6, 4, 5, 5, 1, 3, 7, 1, 0, 2, 3, 5, 4, 0, 1]
            rel material:binding = </root/materials/Material>
            normal3f[] normals = [(-2.3880695e-8, 0, 1), (-2.3880695e-8, 0, 1), (-2.3880695e-8, 0, 1), (-2.3880695e-8, 0, 1), (-0.23399627, -0.9436586, -0.2339963), (-0.23399627, -0.9436586, -0.2339963), (-0.23399627, -0.9436586, -0.2339963), (-0.23399627, -0.9436586, -0.2339963), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(1, 1, 1), (1, 1, -1), (1, -1.9918684, 1), (1, -1, -1), (-1, 1, 1), (-1, 1, -1), (-1, -1, 1), (-1, -1, -1)]
            int[] primvars:skel:jointIndices = [0, 0, 0, 0, 0, 0, 0, 0] (
                elementSize = 1
                interpolation = "vertex"
            )
            float[] primvars:skel:jointWeights = [1, 1, 1, 1, 1, 1, 1, 1] (
                elementSize = 1
                interpolation = "vertex"
            )
            texCoord2f[] primvars:st = [(0.625, 0.5), (0.875, 0.5), (0.875, 0.75), (0.625, 0.75), (0.375, 0.75), (0.625, 0.75), (0.625, 1), (0.375, 1), (0.375, 0), (0.625, 0), (0.625, 0.25), (0.375, 0.25), (0.125, 0.5), (0.375, 0.5), (0.375, 0.75), (0.125, 0.75), (0.375, 0.5), (0.625, 0.5), (0.625, 0.75), (0.375, 0.75), (0.375, 0.25), (0.625, 0.25), (0.625, 0.5), (0.375, 0.5)] (
                interpolation = "faceVarying"
            )
            uniform token[] skel:blendShapes = ["Key_1"]
            rel skel:blendShapeTargets = </root/Cube/Cube/Key_1>
            prepend rel skel:skeleton = </root/Cube/Skel>
            uniform token subdivisionScheme = "none"
            custom string userProperties:blenderName:data = "Cube"
            custom string userProperties:blenderName:data:st = "UVMap"

            def BlendShape "Key_1"
            {
                uniform vector3f[] offsets = [(0, 0, 0.98508406), (0, 0, 0), (0, 0.892874, 0.98508406), (0, 0, 0), (0, 0, 0.98508406), (0, 0, 0), (0, 0, 0.98508406), (0, 0, 0)]
                uniform int[] pointIndices = [0, 1, 2, 3, 4, 5, 6, 7]
            }
        }

        def Skeleton "Skel"
        {
            uniform matrix4d[] bindTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )]
            uniform token[] joints = ["joint1"]
            uniform matrix4d[] restTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )]
            prepend rel skel:animationSource = </root/Cube/Skel/Anim>

            def SkelAnimation "Anim"
            {
                uniform token[] blendShapes = ["Key_1"]
                float[] blendShapeWeights = [0]
            }
        }
    }

    def Xform "Light"
    {
        custom string userProperties:blenderName:object = "Light"
        float3 xformOp:rotateXYZ = (37.26105, 3.163703, 106.93632)
        float3 xformOp:scale = (1, 0.99999994, 1)
        double3 xformOp:translate = (4.076245307922363, 1.0054539442062378, 5.903861999511719)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def SphereLight "Light"
        {
            custom color3f color = (1, 1, 1)
            color3f inputs:color = (1, 1, 1)
            float inputs:intensity = 5435247
            float inputs:radius = 0.10000002
            float inputs:specular = 1
            custom float intensity = 5435247
            custom float radius = 0.10000002
            custom float specular = 1
            custom string userProperties:blenderName:data = "Light"
        }
    }

    def Xform "Camera"
    {
        custom string userProperties:blenderName:object = "Camera"
        float3 xformOp:rotateXYZ = (63.559303, -0.0000026647115, 46.691948)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (7.358891487121582, -6.925790786743164, 4.958309173583984)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Camera "Camera"
        {
            float2 clippingRange = (10, 10000)
            float focalLength = 50
            float horizontalAperture = 36
            float horizontalApertureOffset = 0
            token projection = "perspective"
            double shutter:close = 0.25
            double shutter:open = -0.25
            custom string userProperties:blenderName:data = "Camera"
            float verticalAperture = 24
            float verticalApertureOffset = 0
        }
    }
}

