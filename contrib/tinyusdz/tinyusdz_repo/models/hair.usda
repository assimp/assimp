#usda 1.0
(
    doc = "Blender v2.83.7"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "Light"
{
    matrix4d xformOp:transform = ( (-0.29086464643478394, 0.9551711678504944, -0.05518905818462372, 0), (-0.7711008191108704, -0.1998833566904068, 0.6045247316360474, 0), (0.5663931965827942, 0.21839119493961334, 0.7946722507476807, 0), (4.076245307922363, 1.0054539442062378, 5.903861999511719, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def SphereLight "Light"
    {
        color3f color = (1, 1, 1)
        float intensity = 10
        float radius = 0.1
        float specular = 1
    }
}

def Xform "Camera"
{
    matrix4d xformOp:transform = ( (0.6859206557273865, 0.7276763319969177, 0, 0), (-0.32401347160339355, 0.305420845746994, 0.8953956365585327, 0), (0.6515582203865051, -0.6141703724861145, 0.44527140259742737, 0), (7.358891487121582, -6.925790786743164, 4.958309173583984, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def Camera "Camera"
    {
        float2 clippingRange = (0.1, 100)
        float focalLength = 50
        float horizontalAperture = 36
        float horizontalApertureOffset = 0
        token projection = "perspective"
        float verticalAperture = 20.25
        float verticalApertureOffset = 0
    }
}

def Xform "Plane"
{
    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def BasisCurves "ParticleSettings"
    {
        uniform token basis = "bspline"
        int[] curveVertexCounts = [9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
        point3f[] points = [(0.0825153, -0.7126689, 0), (0.0825153, -0.7126689, 0.41532692), (0.0825153, -0.7126689, 0.99539745), (0.0825153, -0.7126689, 1.4209023), (0.0825153, -0.7126689, 1.9300001), (0.0825153, -0.7126689, 2.439098), (0.0825153, -0.7126689, 2.8646023), (0.0825153, -0.7126689, 3.4446728), (0.0825153, -0.7126689, 3.8599997), (-0.74895674, -0.42046744, 0), (-0.74895674, -0.42046744, 0.41532692), (-0.74895674, -0.42046744, 0.99539745), (-0.74895674, -0.42046744, 1.4209023), (-0.74895674, -0.42046744, 1.9300001), (-0.74895674, -0.42046744, 2.439098), (-0.74895674, -0.42046744, 2.8646023), (-0.74895674, -0.42046744, 3.4446728), (-0.74895674, -0.42046744, 3.8599997), (-0.84020585, -0.8705612, 0), (-0.84020585, -0.8705612, 0.41532692), (-0.84020585, -0.8705612, 0.99539745), (-0.84020585, -0.8705612, 1.4209023), (-0.84020585, -0.8705612, 1.9300001), (-0.84020585, -0.8705612, 2.439098), (-0.84020585, -0.8705612, 2.8646023), (-0.84020585, -0.8705612, 3.4446728), (-0.84020585, -0.8705612, 3.8599997), (0.76589143, -0.48999798, 0), (0.76589143, -0.48999798, 0.41532692), (0.76589143, -0.48999798, 0.99539745), (0.76589143, -0.48999798, 1.4209023), (0.76589143, -0.48999798, 1.9300001), (0.76589143, -0.48999798, 2.439098), (0.76589143, -0.48999798, 2.8646023), (0.76589143, -0.48999798, 3.4446728), (0.76589143, -0.48999798, 3.8599997), (0.6797011, 0.63009846, 0), (0.6797011, 0.63009846, 0.41532692), (0.6797011, 0.63009846, 0.99539745), (0.6797011, 0.63009846, 1.4209023), (0.6797011, 0.63009846, 1.9300001), (0.6797011, 0.63009846, 2.439098), (0.6797011, 0.63009846, 2.8646023), (0.6797011, 0.63009846, 3.4446728), (0.6797011, 0.63009846, 3.8599997), (0.96835244, 0.24794665, 0), (0.96835244, 0.24794665, 0.41532692), (0.96835244, 0.24794665, 0.99539745), (0.96835244, 0.24794665, 1.4209023), (0.96835244, 0.24794665, 1.9300001), (0.96835244, 0.24794665, 2.439098), (0.96835244, 0.24794665, 2.8646023), (0.96835244, 0.24794665, 3.4446728), (0.96835244, 0.24794665, 3.8599997), (0.52848554, -0.86063015, 0), (0.52848554, -0.86063015, 0.41532692), (0.52848554, -0.86063015, 0.99539745), (0.52848554, -0.86063015, 1.4209023), (0.52848554, -0.86063015, 1.9300001), (0.52848554, -0.86063015, 2.439098), (0.52848554, -0.86063015, 2.8646023), (0.52848554, -0.86063015, 3.4446728), (0.52848554, -0.86063015, 3.8599997), (-0.20061585, 0.57317805, 0), (-0.20061585, 0.57317805, 0.41532692), (-0.20061585, 0.57317805, 0.99539745), (-0.20061585, 0.57317805, 1.4209023), (-0.20061585, 0.57317805, 1.9300001), (-0.20061585, 0.57317805, 2.439098), (-0.20061585, 0.57317805, 2.8646023), (-0.20061585, 0.57317805, 3.4446728), (-0.20061585, 0.57317805, 3.8599997), (-0.3693127, -0.7677623, 0), (-0.3693127, -0.7677623, 0.41532692), (-0.3693127, -0.7677623, 0.99539745), (-0.3693127, -0.7677623, 1.4209023), (-0.3693127, -0.7677623, 1.9300001), (-0.3693127, -0.7677623, 2.439098), (-0.3693127, -0.7677623, 2.8646023), (-0.3693127, -0.7677623, 3.4446728), (-0.3693127, -0.7677623, 3.8599997), (0.24664283, 0.7816913, 0), (0.24664283, 0.7816913, 0.41532692), (0.24664283, 0.7816913, 0.99539745), (0.24664283, 0.7816913, 1.4209023), (0.24664283, 0.7816913, 1.9300001), (0.24664283, 0.7816913, 2.439098), (0.24664283, 0.7816913, 2.8646023), (0.24664283, 0.7816913, 3.4446728), (0.24664283, 0.7816913, 3.8599997)]
        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
        uniform token type = "cubic"
    }

    def Mesh "Plane"
    {
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 3, 2]
        normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(-1, -1, 0), (1, -1, 0), (-1, 1, 0), (1, 1, 0)]
        texCoord2f[] primvars:UVMap = [(0, 0), (1, 0), (1, 1), (0, 1)] (
            interpolation = "faceVarying"
        )
        uniform token subdivisionScheme = "none"
    }
}

